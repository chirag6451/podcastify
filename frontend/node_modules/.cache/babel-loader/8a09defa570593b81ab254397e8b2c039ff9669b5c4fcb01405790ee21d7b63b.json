{"ast":null,"code":"var _jsxFileName = \"/Users/chiragahmedabadi/dev/google_auth/src/components/GmailView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GmailView = ({\n  accessToken\n}) => {\n  _s();\n  const [emails, setEmails] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchEmails = async () => {\n      try {\n        const response = await fetch('https://gmail.googleapis.com/gmail/v1/users/me/messages?maxResults=10', {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch emails');\n        }\n        const data = await response.json();\n\n        // Fetch details for each email\n        const emailPromises = data.messages.map(async message => {\n          const detailResponse = await fetch(`https://gmail.googleapis.com/gmail/v1/users/me/messages/${message.id}`, {\n            headers: {\n              Authorization: `Bearer ${accessToken}`\n            }\n          });\n          return detailResponse.json();\n        });\n        const emailDetails = await Promise.all(emailPromises);\n        setEmails(emailDetails);\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    if (accessToken) {\n      fetchEmails();\n    }\n  }, [accessToken]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading emails...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gmail-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recent Emails\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"email-list\",\n      children: emails.map(email => {\n        var _email$payload$header, _email$payload$header2, _email$payload$header3;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"email-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: ((_email$payload$header = email.payload.headers.find(h => h.name.toLowerCase() === 'subject')) === null || _email$payload$header === void 0 ? void 0 : _email$payload$header.value) || 'No Subject'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"From: \", ((_email$payload$header2 = email.payload.headers.find(h => h.name.toLowerCase() === 'from')) === null || _email$payload$header2 === void 0 ? void 0 : _email$payload$header2.value) || 'Unknown Sender']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Date: \", ((_email$payload$header3 = email.payload.headers.find(h => h.name.toLowerCase() === 'date')) === null || _email$payload$header3 === void 0 ? void 0 : _email$payload$header3.value) || 'No Date']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)]\n        }, email.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(GmailView, \"Euylchhn8zQbWsS8EhOkKL+D2kk=\");\n_c = GmailView;\nexport default GmailView;\nvar _c;\n$RefreshReg$(_c, \"GmailView\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GmailView","accessToken","_s","emails","setEmails","loading","setLoading","error","setError","fetchEmails","response","fetch","headers","Authorization","ok","Error","data","json","emailPromises","messages","map","message","detailResponse","id","emailDetails","Promise","all","err","children","fileName","_jsxFileName","lineNumber","columnNumber","className","email","_email$payload$header","_email$payload$header2","_email$payload$header3","payload","find","h","name","toLowerCase","value","_c","$RefreshReg$"],"sources":["/Users/chiragahmedabadi/dev/google_auth/src/components/GmailView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst GmailView = ({ accessToken }) => {\n  const [emails, setEmails] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchEmails = async () => {\n      try {\n        const response = await fetch(\n          'https://gmail.googleapis.com/gmail/v1/users/me/messages?maxResults=10',\n          {\n            headers: {\n              Authorization: `Bearer ${accessToken}`,\n            },\n          }\n        );\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch emails');\n        }\n\n        const data = await response.json();\n        \n        // Fetch details for each email\n        const emailPromises = data.messages.map(async (message) => {\n          const detailResponse = await fetch(\n            `https://gmail.googleapis.com/gmail/v1/users/me/messages/${message.id}`,\n            {\n              headers: {\n                Authorization: `Bearer ${accessToken}`,\n              },\n            }\n          );\n          return detailResponse.json();\n        });\n\n        const emailDetails = await Promise.all(emailPromises);\n        setEmails(emailDetails);\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n\n    if (accessToken) {\n      fetchEmails();\n    }\n  }, [accessToken]);\n\n  if (loading) return <div>Loading emails...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div className=\"gmail-container\">\n      <h2>Recent Emails</h2>\n      <div className=\"email-list\">\n        {emails.map((email) => (\n          <div key={email.id} className=\"email-item\">\n            <h3>{email.payload.headers.find(h => h.name.toLowerCase() === 'subject')?.value || 'No Subject'}</h3>\n            <p>From: {email.payload.headers.find(h => h.name.toLowerCase() === 'from')?.value || 'Unknown Sender'}</p>\n            <p>Date: {email.payload.headers.find(h => h.name.toLowerCase() === 'date')?.value || 'No Date'}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default GmailView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}