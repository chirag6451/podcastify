{"ast":null,"code":"var _jsxFileName = \"/Users/chiragahmedabadi/dev/google_auth/src/components/DriveView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DriveView = ({\n  accessToken\n}) => {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchFiles = async () => {\n      try {\n        const response = await fetch('https://www.googleapis.com/drive/v3/files?pageSize=10&fields=files(id,name,mimeType,webViewLink,createdTime)', {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch files');\n        }\n        const data = await response.json();\n        setFiles(data.files);\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    if (accessToken) {\n      fetchFiles();\n    }\n  }, [accessToken]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading files...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"drive-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recent Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-list\",\n      children: files.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Type: \", file.mimeType]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Created: \", new Date(file.createdTime).toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), file.webViewLink && /*#__PURE__*/_jsxDEV(\"a\", {\n          href: file.webViewLink,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"View File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this)]\n      }, file.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(DriveView, \"fo9KTD/n0DDC59+6bjHTrvLrhxA=\");\n_c = DriveView;\nexport default DriveView;\nvar _c;\n$RefreshReg$(_c, \"DriveView\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DriveView","accessToken","_s","files","setFiles","loading","setLoading","error","setError","fetchFiles","response","fetch","headers","Authorization","ok","Error","data","json","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","file","name","mimeType","Date","createdTime","toLocaleDateString","webViewLink","href","target","rel","id","_c","$RefreshReg$"],"sources":["/Users/chiragahmedabadi/dev/google_auth/src/components/DriveView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst DriveView = ({ accessToken }) => {\n  const [files, setFiles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchFiles = async () => {\n      try {\n        const response = await fetch(\n          'https://www.googleapis.com/drive/v3/files?pageSize=10&fields=files(id,name,mimeType,webViewLink,createdTime)',\n          {\n            headers: {\n              Authorization: `Bearer ${accessToken}`,\n            },\n          }\n        );\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch files');\n        }\n\n        const data = await response.json();\n        setFiles(data.files);\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n\n    if (accessToken) {\n      fetchFiles();\n    }\n  }, [accessToken]);\n\n  if (loading) return <div>Loading files...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div className=\"drive-container\">\n      <h2>Recent Files</h2>\n      <div className=\"file-list\">\n        {files.map((file) => (\n          <div key={file.id} className=\"file-item\">\n            <h3>{file.name}</h3>\n            <p>Type: {file.mimeType}</p>\n            <p>Created: {new Date(file.createdTime).toLocaleDateString()}</p>\n            {file.webViewLink && (\n              <a href={file.webViewLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                View File\n              </a>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default DriveView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}