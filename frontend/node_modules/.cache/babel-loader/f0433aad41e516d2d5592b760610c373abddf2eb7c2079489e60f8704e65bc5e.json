{"ast":null,"code":"var _jsxFileName = \"/Users/chiragahmedabadi/dev/google_auth/src/components/YouTubeView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YouTubeView = ({\n  accessToken\n}) => {\n  _s();\n  const [playlists, setPlaylists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      try {\n        const response = await fetch('https://www.googleapis.com/youtube/v3/playlists?part=snippet&mine=true&maxResults=10', {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch playlists');\n        }\n        const data = await response.json();\n        setPlaylists(data.items);\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    if (accessToken) {\n      fetchPlaylists();\n    }\n  }, [accessToken]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading playlists...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"youtube-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your YouTube Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playlist-list\",\n      children: playlists.map(playlist => {\n        var _playlist$snippet$thu;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playlist-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: playlist.snippet.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: playlist.snippet.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), ((_playlist$snippet$thu = playlist.snippet.thumbnails) === null || _playlist$snippet$thu === void 0 ? void 0 : _playlist$snippet$thu.default) && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: playlist.snippet.thumbnails.default.url,\n            alt: playlist.snippet.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this)]\n        }, playlist.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(YouTubeView, \"SA2AOzH5C36IUcyaLIEPV+RRUeE=\");\n_c = YouTubeView;\nexport default YouTubeView;\nvar _c;\n$RefreshReg$(_c, \"YouTubeView\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","YouTubeView","accessToken","_s","playlists","setPlaylists","loading","setLoading","error","setError","fetchPlaylists","response","fetch","headers","Authorization","ok","Error","data","json","items","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","playlist","_playlist$snippet$thu","snippet","title","description","thumbnails","default","src","url","alt","id","_c","$RefreshReg$"],"sources":["/Users/chiragahmedabadi/dev/google_auth/src/components/YouTubeView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst YouTubeView = ({ accessToken }) => {\n  const [playlists, setPlaylists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      try {\n        const response = await fetch(\n          'https://www.googleapis.com/youtube/v3/playlists?part=snippet&mine=true&maxResults=10',\n          {\n            headers: {\n              Authorization: `Bearer ${accessToken}`,\n            },\n          }\n        );\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch playlists');\n        }\n\n        const data = await response.json();\n        setPlaylists(data.items);\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n\n    if (accessToken) {\n      fetchPlaylists();\n    }\n  }, [accessToken]);\n\n  if (loading) return <div>Loading playlists...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div className=\"youtube-container\">\n      <h2>Your YouTube Playlists</h2>\n      <div className=\"playlist-list\">\n        {playlists.map((playlist) => (\n          <div key={playlist.id} className=\"playlist-item\">\n            <h3>{playlist.snippet.title}</h3>\n            <p>{playlist.snippet.description}</p>\n            {playlist.snippet.thumbnails?.default && (\n              <img\n                src={playlist.snippet.thumbnails.default.url}\n                alt={playlist.snippet.title}\n              />\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default YouTubeView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}