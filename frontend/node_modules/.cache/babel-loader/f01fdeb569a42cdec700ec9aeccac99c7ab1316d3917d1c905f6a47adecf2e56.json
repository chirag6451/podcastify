{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dataportability_v1beta = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar dataportability_v1beta;\n(function (dataportability_v1beta) {\n  /**\n   * Data Portability API\n   *\n   * The Data Portability API lets you build applications that request authorization from a user to move a copy of data from Google services into your application. This enables data portability and facilitates switching services.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const dataportability = google.dataportability('v1beta');\n   * ```\n   */\n  class Dataportability {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.archiveJobs = new Resource$Archivejobs(this.context);\n      this.authorization = new Resource$Authorization(this.context);\n      this.portabilityArchive = new Resource$Portabilityarchive(this.context);\n    }\n  }\n  dataportability_v1beta.Dataportability = Dataportability;\n  class Resource$Archivejobs {\n    constructor(context) {\n      this.context = context;\n    }\n    getPortabilityArchiveState(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://dataportability.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    retry(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://dataportability.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}:retry').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  dataportability_v1beta.Resource$Archivejobs = Resource$Archivejobs;\n  class Resource$Authorization {\n    constructor(context) {\n      this.context = context;\n    }\n    reset(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://dataportability.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/authorization:reset').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  dataportability_v1beta.Resource$Authorization = Resource$Authorization;\n  class Resource$Portabilityarchive {\n    constructor(context) {\n      this.context = context;\n    }\n    initiate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://dataportability.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/portabilityArchive:initiate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  dataportability_v1beta.Resource$Portabilityarchive = Resource$Portabilityarchive;\n})(dataportability_v1beta || (exports.dataportability_v1beta = dataportability_v1beta = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","dataportability_v1beta","googleapis_common_1","require","Dataportability","constructor","options","google","context","_options","archiveJobs","Resource$Archivejobs","authorization","Resource$Authorization","portabilityArchive","Resource$Portabilityarchive","getPortabilityArchiveState","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","apiVersion","requiredParams","pathParams","createAPIRequest","retry","reset","initiate"],"sources":["/Users/chiragahmedabadi/dev/google_auth/node_modules/googleapis/build/src/apis/dataportability/v1beta.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dataportability_v1beta = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar dataportability_v1beta;\n(function (dataportability_v1beta) {\n    /**\n     * Data Portability API\n     *\n     * The Data Portability API lets you build applications that request authorization from a user to move a copy of data from Google services into your application. This enables data portability and facilitates switching services.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const dataportability = google.dataportability('v1beta');\n     * ```\n     */\n    class Dataportability {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.archiveJobs = new Resource$Archivejobs(this.context);\n            this.authorization = new Resource$Authorization(this.context);\n            this.portabilityArchive = new Resource$Portabilityarchive(this.context);\n        }\n    }\n    dataportability_v1beta.Dataportability = Dataportability;\n    class Resource$Archivejobs {\n        constructor(context) {\n            this.context = context;\n        }\n        getPortabilityArchiveState(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataportability.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        retry(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataportability.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}:retry').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    dataportability_v1beta.Resource$Archivejobs = Resource$Archivejobs;\n    class Resource$Authorization {\n        constructor(context) {\n            this.context = context;\n        }\n        reset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataportability.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/authorization:reset').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    dataportability_v1beta.Resource$Authorization = Resource$Authorization;\n    class Resource$Portabilityarchive {\n        constructor(context) {\n            this.context = context;\n        }\n        initiate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataportability.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/portabilityArchive:initiate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    dataportability_v1beta.Resource$Portabilityarchive = Resource$Portabilityarchive;\n})(dataportability_v1beta || (exports.dataportability_v1beta = dataportability_v1beta = {}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}